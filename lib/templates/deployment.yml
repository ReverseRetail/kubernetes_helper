documents:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: &app_name <%=deployment.name%>
    spec: &default_spec
      replicas: <%=deployment.replicas%>
      selector:
        matchLabels:
          name: *app_name
      strategy:
        type: RollingUpdate
        rollingUpdate:
          maxSurge: 1
          maxUnavailable: 1
      minReadySeconds: 5
      template:
        metadata:
          labels:
            name: *app_name
        spec: &template_spec
          containers:
            - &app_container
              image: '<%=continuous_deployment.image_name%>:latest'
              <% if deployment.command %>
              command: ["/bin/bash", "-c", "<%= deployment.command %>"]
              <% end %>
              name: *app_name
              static_env: true
              import_secrets: ['secrets.yml', '<%=secrets.name%>']
              ports:
                - containerPort: &port 3000
                  name: '<%=service.backend_port_name%>'

              <% if deployment.liveness_path %>
              livenessProbe: &liveness_probe
                httpGet:
                  path: <%=deployment.liveness_path%>
                  port: *port
                initialDelaySeconds: 50
                timeoutSeconds: 3
                periodSeconds: 15
              readinessProbe: *liveness_probe
              <% end %>
              <%= include_template "_container_extras.yml", { pod: 'web' } %>

              volumeMounts:
                - &log_volume
                  name: applog
                  mountPath: /app/log

                <% if deployment.cloud_secret_name %>
                - &cloud_credentials_volume
                  name: gcloud-creds
                  mountPath: /secrets/gcloud
                  readOnly: true
                <% end %>

                <% (deployment.custom_volumes || {}).each do |name, vol| %>
                - name: <%= name %>
                  mountPath: <%= vol[:mount_path] %>
                <% end %>

            <% if deployment.cloud_secret_name %>
            - &cloudsql_container
              image: gcr.io/cloudsql-docker/gce-proxy:1.09 # Cloud sql proxy
              name: cloudsql-proxy
              command: ["/cloud_sql_proxy", "--dir=/cloudsql",
                        "-instances=<%=deployment.cloud_sql_instance%>",
                        "-credential_file=/secrets/gcloud/credentials.json"]
              env: []
              volumeMounts:
                - *cloud_credentials_volume
              <%= include_template "_container_extras.yml", { pod: 'cloudsql' } %>
            <% end %>

            - &logs_container # print to stdout all log files
              name: print-logs
              image: busybox
              command: [/bin/sh, -c, 'until find /app/log/*.log; do sleep 1; done; tail -n+1 -f /app/log/*.log']
              env: []
              volumeMounts:
                - *log_volume
              <%= include_template "_container_extras.yml", { pod: 'logs' } %>

            <%= include_template "_custom_containers.yml", { pod: 'web' } %>

          terminationGracePeriodSeconds: 120
          volumes:
            <% if deployment.cloud_secret_name %>
            - name: gcloud-creds
              secret:
                secretName: '<%=deployment.cloud_secret_name%>'
            <% end %>

            - name: applog
              emptyDir: {}

            # Custom volumes
            # { my_volume: { kind: 'hostPath', mount_path: '/', settings: { path: '..', type: 'Directory' } }  }
            <% (deployment.custom_volumes || {}).each do |name, vol| %>
            - name: <%= name %>
              <%= vol[:kind] %>:
                <% vol[:settings].each do |k, v| %>
                <%= k %>: <%= v %>
                <% end %>
            <% end %>


  <% if deployment.job_name %>
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: &job_app_name <%=deployment.job_name%>
    spec:
      <<: *default_spec
      replicas: 1
      selector:
        matchLabels:
          name: *job_app_name
      template:
        metadata:
          labels:
            name: *job_app_name
        spec:
          <<: *template_spec
          containers:
            - <<: *app_container
              name: *job_app_name
              <% if deployment.job_command %>
              command: [ "/bin/bash", "-c", "<%= deployment.job_command %>" ]
              <% end %>
              <%= include_template "_app_container_misc.yml", { pod: 'job' } %>

            <% if deployment.job_sidekiq_alive_gem %>
              <%= include_template "_sidekiq_alive_gem.yml" %>
            <% else %>
              ports: [ ]
              <% if (deployment.job_services || []).any? %>
              livenessProbe: &liveness_probe
                exec:
                  command: [ /bin/sh, -c,
                      'if [ $(ps -ef | grep "<%= deployment.job_services.join("\|") %>" | grep -v "grep" | wc -l) -lt <%= deployment.job_services.count %> ]; then
                           echo "Some required services are not running"; exit 1;
                       fi' ]
                initialDelaySeconds: 120
                periodSeconds: 30
              readinessProbe: *liveness_probe
              <% end %>
            <% end %>

            <% if deployment.cloud_secret_name %>
            - *cloudsql_container
            <% end %>

            - <<: *logs_container

            <%= include_template "_custom_containers.yml", { pod: 'job' } %>
  <% end %>

  <% if deployment.replicas_range %>
  <%= include_template "_replicas.yml" %>
  <% end %>
